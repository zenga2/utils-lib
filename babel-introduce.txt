                          babel introduce
   1、.babelrc
     {
        // 包含到当前时间的所有语法特性,
        // 例如当前时间including es2015, es2016, es2017
        // 明年(2018)的话including es2015, es2016, es2017, es2018
        "presets":["latest"],

        //         The runtime transformer plugin does three things:
        // 1、Automatically requires babel-runtime/regenerator when you use generators/async functions.
        // 2、Automatically requires babel-runtime/core-js and maps ES6 static methods and built-ins.
        // 3、Removes the inline babel helpers and uses the module babel-runtime/helpers instead.

        // What does this actually mean though? Basically, you can use built-ins such as Promise, Set, Symbol etc
        // as well use all the Babel features that require a polyfill seamlessly,
        // without global pollution, making it extremely suitable for libraries.
        // Make sure you include babel-runtime as a dependency

        // 如果使用generators/async函数，则转为对babel-runtime/regenerator的引用
        // 也就是说它只会将语法转换所需的helpers转换成对babel-runtime/helpers的引用,不再包含在每个文件里
        // 自动引入静态方法(如Object.assign)，但不会引入实例对象的api(String.prototype.includes),这个需要引入babel-polyfill或者是引入core-js
        // 将一些全局对象(如Promise、Set等)转成对babel-runtime的引用，不再像babel-polyfill添加到全局环境中

        // 我推荐使用transform-runtime + core-js(只引入必须的实例API)这样可以尽可能地缩减代码

        "plugins":["transform-runtime"]
     }

     2、--save(dependencies)
        babel-runtime(与transform-runtime配合还用)

     3、--save-dev(devDependencies)
        babel-cli(运行babel命令所需)
        babel-core(提供代码中手动转换所需的api)
        babel-register(改写require命令，使其在加载代码时进行转换，使用时必须首先require("babel-register"))
        eg:
           require('babel-register')
           require('./index')

        babel-plugin-transform-runtime(如上)
        eslint  (代码检查)
        babel-eslint

        当.eslintrc.js中extends为 "standard"需添加下面三个package
        eslint-config-standard
        eslint-plugin-promise
        eslint-plugin-standard

    4、package.json
      "scripts":{
         "build": "babel src -d dis -s"   (-d指定输出目录， -s生成source map文件)
         "lint": "eslint src-es6 && eslint src && eslint test"
      }

    5、.eslintrc.js配置模板
      module.exports = {
          root: true,
          parser: 'babel-eslint',
          parserOptions: {
              sourceType: 'module'
          },
          extends: "standard",
          plugins: [],
          rules: {
              'space-before-function-paren': 0,
              'indent': 0
          }
      }

  6、.eslintignore 配置忽略的文件
     例如：
       build/*.js
       config/*.js
